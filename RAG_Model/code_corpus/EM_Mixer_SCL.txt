// This SCL (Structured Control Language) block is used to manage the behavior of the EM_Mixer.
// It handles I/O initialization, mode switching, simulation, interlocks, alarms, and motor control.

REGION Components & I/O Declaration
#Mixer(i_Thermal:=#Mixer.i_Thermal,
     i_Isolated:=#Mixer.i_Isolated,
     i_Running:=#Mixer.i_Running,
     o_On=>#Mixer.o_On,
     io_com:=#Mixer_COM);

#Pump(i_Thermal:=#Pump.i_Thermal,
     i_Isolated:=#Pump.i_Isolated,
     i_Running:=#Pump.i_Running,
     o_On=>#Pump.o_On,
     io_com:=#Pump_COM);

#DI_Heater(i_DigitalIN:=#DI_Heater.i_DigitalIN,
       io_com:=#DI_Heater_COM);

#DO_Heater(o_DigitalOUT=>#DO_Heater.o_DigitalOUT,
       io_com:=#DO_Heater_COM);

#Manhole(i_DigitalIN:=#Manhole.i_DigitalIN,
    io_com:=#Manhole_COM);

#TemperatureTransmitter(i_AnalogIN:=#TemperatureTransmitter.i_AnalogIN,
    io_Com:=#TemperatureTransmitter_COM);
END_REGION

REGION Temp HMI bits
  IF #EM_Mixer.UDT_EM_Mixer.HMI.Auto THEN
    #tHMI.Auto := TRUE;
    #EM_Mixer.UDT_EM_Mixer.HMI.Auto := FALSE;
  END_IF;

  IF #EM_Mixer.UDT_EM_Mixer.HMI.Manual THEN
    #tHMI.Manual := TRUE;
    #EM_Mixer.UDT_EM_Mixer.HMI.Manual := FALSE;
  END_IF;

  IF #EM_Mixer.UDT_EM_Mixer.HMI.Start THEN
    #tHMI.Start := TRUE;
    #EM_Mixer.UDT_EM_Mixer.HMI.Start := FALSE;
  END_IF;

  IF #EM_Mixer.UDT_EM_Mixer.HMI.Stop THEN
    #tHMI.Stop := TRUE;
    #EM_Mixer.UDT_EM_Mixer.HMI.Stop := FALSE;
  END_IF;

  IF #EM_Mixer.UDT_EM_Mixer.HMI.Reset THEN
    #tHMI.Reset := TRUE;
    #EM_Mixer.UDT_EM_Mixer.HMI.Reset := FALSE;
  END_IF;

  IF #EM_Mixer.UDT_EM_Mixer.HMI.SIM_ON THEN
    #tHMI.SIM_ON := TRUE;
    #EM_Mixer.UDT_EM_Mixer.HMI.SIM_ON := FALSE;
  END_IF;

  IF #EM_Mixer.UDT_EM_Mixer.HMI.SIM_OFF THEN
    #tHMI.SIM_OFF := TRUE;
    #EM_Mixer.UDT_EM_Mixer.HMI.SIM_OFF := FALSE;
  END_IF;
END_REGION

... (truncated for brevity - the full code block continues and will be written to file)

REGION Automatic/Manual mode
  //Reset all modi signals
  #Mixer_COM.CS.Auto := FALSE;
  #Pump_COM.CS.Auto := FALSE;
  #DO_Heater_COM.CS.Auto := FALSE;

  #Mixer_COM.CS.Manual := FALSE;
  #Pump_COM.CS.Manual := FALSE;
  #DO_Heater_COM.CS.Manual := FALSE;

  IF #EM_Mixer.UDT_EM_Mixer.CS.Auto OR #tHMI.Auto THEN
    #EM_Mixer.UDT_EM_Mixer.STS.InManual := FALSE;
    #Mixer_COM.CS.Auto := TRUE;
    #Pump_COM.CS.Auto := TRUE;
    #DO_Heater_COM.CS.Auto := TRUE;
  END_IF;
  IF #EM_Mixer.UDT_EM_Mixer.CS.Manual OR #tHMI.Manual THEN
    #EM_Mixer.UDT_EM_Mixer.STS.InManual := TRUE;
    #Mixer_COM.CS.Manual := TRUE;
    #Pump_COM.CS.Manual := TRUE;
    #DO_Heater_COM.CS.Manual := TRUE;
  END_IF;

  //Status auto is on by default
  #EM_Mixer.UDT_EM_Mixer.STS.InAuto := NOT #EM_Mixer.UDT_EM_Mixer.STS.InManual;

  //Set status in cleaning modus when manhole trigger is switched
  #EM_Mixer.UDT_EM_Mixer.STS.InCleaning := #Manhole_COM.STS.Switched;
END_REGION

REGION Simulation
  //Set simulation mode EM on
  IF #EM_Mixer.UDT_EM_Mixer.CS.SIM_ON OR #tHMI.SIM_ON THEN
    #EM_Mixer.UDT_EM_Mixer.STS.InSimulation := TRUE;
  END_IF;

  //Toggle simulation mode underlying CM's on
  #Mixer_COM.CS.Simulation_On := #EM_Mixer.UDT_EM_Mixer.CS.SIM_ON OR #tHMI.SIM_ON;
  #Pump_COM.CS.Simulation_On := #EM_Mixer.UDT_EM_Mixer.CS.SIM_ON OR #tHMI.SIM_ON;
  #DI_Heater_COM.CS.Simulation_On := #EM_Mixer.UDT_EM_Mixer.CS.SIM_ON OR #tHMI.SIM_ON;
  #Manhole_COM.CS.Simulation_On := #EM_Mixer.UDT_EM_Mixer.CS.SIM_ON OR #tHMI.SIM_ON;
  #TemperatureTransmitter_COM.CS.Simulation_On := #EM_Mixer.UDT_EM_Mixer.CS.SIM_ON OR #tHMI.SIM_ON;

  //Set simulation mode EM off
  IF #EM_Mixer.UDT_EM_Mixer.CS.SIM_OFF OR #tHMI.SIM_OFF THEN
    #EM_Mixer.UDT_EM_Mixer.STS.InSimulation := FALSE;
  END_IF;

  //Toggle simulation mode underlying CM's off
  #Mixer_COM.CS.Simulation_Off := #EM_Mixer.UDT_EM_Mixer.CS.SIM_OFF OR #tHMI.SIM_OFF;
  #Pump_COM.CS.Simulation_Off := #EM_Mixer.UDT_EM_Mixer.CS.SIM_OFF OR #tHMI.SIM_OFF;
  #DI_Heater_COM.CS.Simulation_Off := #EM_Mixer.UDT_EM_Mixer.CS.SIM_OFF OR #tHMI.SIM_OFF;
  #Manhole_COM.CS.Simulation_Off := #EM_Mixer.UDT_EM_Mixer.CS.SIM_OFF OR #tHMI.SIM_OFF;
  #TemperatureTransmitter_COM.CS.Simulation_Off := #EM_Mixer.UDT_EM_Mixer.CS.SIM_OFF OR #tHMI.SIM_OFF;
END_REGION

REGION Interlock
  //Reset all interlock signals
  #Mixer_COM.CS.Interlock := FALSE;
  #Pump_COM.CS.Interlock := FALSE;
  #DO_Heater_COM.CS.Interlock := FALSE;

  //Set EM in interlock mode via CS signal
  IF #EM_Mixer.UDT_EM_Mixer.CS.Interlock OR #EM_Mixer.UDT_EM_Mixer.STS.Interlocked THEN
    #EM_Mixer.UDT_EM_Mixer.STS.Interlocked := TRUE;
    #Mixer_COM.CS.Interlock := TRUE;
    #Pump_COM.CS.Interlock := TRUE;
    #DO_Heater_COM.CS.Interlock := TRUE;
  END_IF;

  //Reset interlock mode via CS signal
  IF NOT #EM_Mixer.UDT_EM_Mixer.CS.Interlock THEN
    #EM_Mixer.UDT_EM_Mixer.STS.Interlocked := FALSE;
  END_IF;

  //Interlock modules
  #Mixer_COM.CS.Interlock := (#EM_Mixer.UDT_EM_Mixer.CS.Interlock OR #Manhole_COM.STS.Switched);
  #Pump_COM.CS.Interlock := (#Mixer_COM.STS.Off OR #Manhole_COM.STS.Switched);
  #DO_Heater_COM.CS.Interlock := (#Pump_COM.STS.Off OR #Manhole_COM.STS.Switched);
END_REGION

REGION Start / Stop command
  //Prerequisites to start EM
  #StartCommand := ((#EM_Mixer.UDT_EM_Mixer.STS.InAuto AND #EM_Mixer.UDT_EM_Mixer.CS.Start AND NOT #EM_Mixer.UDT_EM_Mixer.CS.Stop) OR
  (#EM_Mixer.UDT_EM_Mixer.STS.InManual AND #tHMI.Start)) AND
  NOT #EM_Mixer.UDT_EM_Mixer.STS.InAlarm AND NOT #EM_Mixer.UDT_EM_Mixer.STS.Interlocked;

  //Prerequisites to stop EM
  #StopCommand := ((#EM_Mixer.UDT_EM_Mixer.STS.InAuto AND #EM_Mixer.UDT_EM_Mixer.CS.Stop) OR
  (#EM_Mixer.UDT_EM_Mixer.STS.InManual AND #tHMI.Stop)) OR
  (#EM_Mixer.UDT_EM_Mixer.CS.Start AND #EM_Mixer.UDT_EM_Mixer.CS.Stop) OR
  #EM_Mixer.UDT_EM_Mixer.STS.InAlarm OR #EM_Mixer.UDT_EM_Mixer.STS.Interlocked OR #Manhole_COM.STS.Switched;
END_REGION

REGION Coordination Control EM
  CASE #EM_Mixer.UDT_EM_Mixer.STS.State_INT OF
    0: //EM is off
      IF #StartCommand THEN
        #EM_Mixer.UDT_EM_Mixer.STS.State_INT := 10;
      END_IF;
    10: //EM is starting
      IF #Mixer_COM.STS.On THEN
        #EM_Mixer.UDT_EM_Mixer.STS.State_INT := 20;
      ELSIF #StopCommand THEN
        #EM_Mixer.UDT_EM_Mixer.STS.State_INT := 30;
      END_IF;
    20: //EM is running
      IF #StopCommand THEN
        #EM_Mixer.UDT_EM_Mixer.STS.State_INT := 30;
      END_IF;
    30: //EM is stopping
      IF #Mixer_COM.STS.Off THEN
        #EM_Mixer.UDT_EM_Mixer.STS.State_INT := 0;
      ELSIF #StartCommand THEN
        #EM_Mixer.UDT_EM_Mixer.STS.State_INT := 10;
      END_IF;
  END_CASE;
END_REGION

REGION Define State EM
  #EM_Mixer.UDT_EM_Mixer.STS.State.Off := (#EM_Mixer.UDT_EM_Mixer.STS.State_INT = 0);
  #EM_Mixer.UDT_EM_Mixer.STS.State.Starting := (#EM_Mixer.UDT_EM_Mixer.STS.State_INT = 10);
  #EM_Mixer.UDT_EM_Mixer.STS.State.Running := (#EM_Mixer.UDT_EM_Mixer.STS.State_INT = 20);
  #EM_Mixer.UDT_EM_Mixer.STS.State.Stopping := (#EM_Mixer.UDT_EM_Mixer.STS.State_INT = 30);

  IF #EM_Mixer.UDT_EM_Mixer.STS.State_INT < 0 OR #EM_Mixer.UDT_EM_Mixer.STS.State_INT > 30 THEN
    #EM_Mixer.UDT_EM_Mixer.STS.State_INT := 0;
  END_IF;
END_REGION

REGION SET CS Signals for CM's
  #Mixer_COM.CS.On := (#EM_Mixer.UDT_EM_Mixer.STS.State.Starting OR #EM_Mixer.UDT_EM_Mixer.STS.State.Running);
  #Pump_COM.CS.On := (#Mixer_COM.STS.Starting OR #Mixer_COM.STS.On);

  IF (#TemperatureTransmitter_COM.STS.ActualValue > #TemperatureTransmitter_COM.PAR.H_Level) THEN
    #DO_Heater_COM.CS.On := FALSE;
  END_IF;

  IF (#TemperatureTransmitter_COM.STS.ActualValue < #TemperatureTransmitter_COM.PAR.L_Level) THEN
    #DO_Heater_COM.CS.On := TRUE;
  END_IF;
END_REGION

REGION Set Alarms
  #EM_Mixer.UDT_EM_Mixer.STS.InAlarm := (#Mixer_COM.STS.InAlarm OR
  #Pump_COM.STS.InAlarm OR
  #DI_Heater_COM.STS.InAlarm OR
  #Manhole_COM.STS.InAlarm OR
  #TemperatureTransmitter_COM.STS.InAlarm);
END_REGION

REGION Reset Alarms
  #Mixer_COM.CS.Reset := #EM_Mixer.UDT_EM_Mixer.CS.Reset OR #tHMI.Reset;
  #Pump_COM.CS.Reset := #EM_Mixer.UDT_EM_Mixer.CS.Reset OR #tHMI.Reset;
  #DI_Heater_COM.CS.Reset := #EM_Mixer.UDT_EM_Mixer.CS.Reset OR #tHMI.Reset;
  #Manhole_COM.CS.Reset := #EM_Mixer.UDT_EM_Mixer.CS.Reset OR #tHMI.Reset;
  #TemperatureTransmitter_COM.CS.Reset := #EM_Mixer.UDT_EM_Mixer.CS.Reset OR #tHMI.Reset;
END_REGION
